from behave import given, when, then

# Mock data for the example
products = [{"id": 1, "name": "Sample Product"}]
deleted_product_id = None

@given('a product exists with name "{product_name}"')
def step_impl_given_product_exists(context, product_name):
    context.product_name = product_name
    context.product_id = products[0]["id"] if products else None

@when('I search for the product by name "{product_name}"')
def step_impl_search_product(context, product_name):
    for product in products:
        if product["name"] == product_name:
            context.search_result = "Success"
            context.product_id = product["id"]
            break
    else:
        context.search_result = "Product not found"

@then('I should see the message "{message}"')
def step_impl_check_message(context, message):
    assert context.search_result == message

@then('I copy the Id of the product')
def step_impl_copy_id(context):
    context.product_id = context.product_id

@when('I delete the product using the Id')
def step_impl_delete_product(context):
    global deleted_product_id
    for product in products:
        if product["id"] == context.product_id:
            products.remove(product)
            deleted_product_id = context.product_id
            context.delete_message = "Product has been Deleted!"
            break

@then('I should see the message "Product has been Deleted!"')
def step_impl_check_delete_message(context):
    assert context.delete_message == "Product has been Deleted!"

@when('I clear the search and search again')
def step_impl_clear_search(context):
    context.search_result = "Product not found"
    for product in products:
        if product["id"] == deleted_product_id:
            context.search_result = "Product found"
            break

@then('I should not see the product in the results')
def step_impl_check_product_not_found(context):
    assert context.search_result == "Product not found"
